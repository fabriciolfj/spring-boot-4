import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask

plugins {
	id 'java'
	id 'org.springframework.boot' version '4.0.0-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.github.davidmc24.gradle.plugin.avro' version '1.9.1'
	id 'org.jetbrains.kotlin.jvm'
}

group = 'com.github.fabriciolfj'
version = '0.0.1-SNAPSHOT'

ext {
	confluentVersion = '7.7.0'
	avroVersion = '1.11.3'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(24)
	}
}

sourceSets {
	main {
		java {
			srcDirs += ['build/generated-main-avro-java']
		}

		resources {
			srcDirs += ['src/main/avro']
		}
	}
}

configurations.all {
	resolutionStrategy {
		force "org.apache.avro:avro:${avroVersion}"
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	gradlePluginPortal()
	maven { url = 'https://repo.spring.io/snapshot' }
	maven {
		url 'https://maven.wso2.org/nexus/content/repositories/releases/'
	}
	maven {
		url 'https://packages.confluent.io/maven/'
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-flyway'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.springframework.amqp:spring-rabbit-stream'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation "io.confluent:kafka-avro-serializer:${confluentVersion}"
	implementation "io.confluent:kafka-schema-registry-client:${confluentVersion}"
	implementation "org.apache.avro:avro:${avroVersion}"
	implementation "io.confluent:kafka-streams-avro-serde:${confluentVersion}"
	// developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('bootBuildImage') {
	runImage = 'paketobuildpacks/ubuntu-noble-run-base:latest'
}

avro {
	createSetters = true
	createOptionalGetters = false
	gettersReturnOptional = false
	optionalGettersForNullableFieldsOnly = false
	fieldVisibility = "PUBLIC"
	outputCharacterEncoding = "UTF-8"
	stringType = "String"
	templateDirectory = null
	enableDecimalLogicalType = true
}

clean {
	delete 'build/generated-main-avro-java'
}

tasks.named("generateAvroJava") {
	source = file("src/main/avro")
	outputDir = file('build/generated-main-avro-java')
	stringType = "CharSequence"
	fieldVisibility = "PUBLIC"
}


compileJava {
	dependsOn generateAvroJava
	source += fileTree(dir: 'build/generated-main-avro-java', include: '**/*.java')
}

processResources.dependsOn generateAvroJava

